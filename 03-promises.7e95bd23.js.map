{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAoDA,SAASC,EAAcC,EAAUC,GAgB/B,OAfiB,IAAIC,SAAQ,CAACC,EAASC,KACfC,KAAKC,SAAW,GAGpCH,EAAQ,C,SAACH,E,MAAUC,IAEnBG,EAAO,C,SAACJ,E,MAAUC,GAAO,IAE1BM,MAAMC,IACPC,EAAAZ,GAASa,OAAOC,QAAQ,uBAAqBX,QAAiBC,MAAU,IAEzEW,OAAOC,IACNJ,EAAAZ,GAASa,OAAOI,QAAQ,sBAAoBd,QAAeC,MAAU,G,EA/D5D,CACXc,OAAQC,SAASC,cAAc,UAG5BF,OAAOG,iBAAiB,UAAUC,IACrCA,EAAEC,iBACF,MAAQC,UAAUpB,MAAEA,EAAKqB,KAAEA,EAAIC,OAAEA,IAAaJ,EAAEK,OAC1CC,EAAaxB,EAAMyB,MACnBC,EAAWL,EAAKI,MAChBE,EAAoBL,EAAOG,MAMjCG,YAAW,KAET,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAmBE,GAAK,EAC3CD,YAAW,KACT9B,EAAc+B,EAAE,GAAIL,EAAaK,GAAKH,EAAS,GAC9CA,EAAWG,EAAE,GAGjBL,GAEHN,EAAEK,OAAOO,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('form')\n}\n\nrefs.formEl.addEventListener('submit', e => {\n  e.preventDefault();\n  const { elements: { delay, step, amount } } = e.target;\n  const firstDelay = delay.value;\n  const interval = step.value;\n  const countIterationAll = amount.value;\n  // let id;\n  // let countIteration = 0;\n  // let currentDelay = 0;\n  // let intervalTime;\n\n  setTimeout(() => {\n \n    for (let i = 0; i < +countIterationAll; i += 1) {\n      setTimeout(() => {\n        createPromise(i+1, +firstDelay + i * +interval);\n      }, interval * i)\n    }\n\n  }, firstDelay)\n  \n  e.target.reset();\n})\n\n\n  // setTimeout(() => {\n\n  //   id = setInterval(() => {\n  //      intervalTime = countIteration === 0 ? 0 : interval;\n  //      console.log(intervalTime);\n\n  //     // currentDelay = +firstDelay + countIteration * +interval;\n\n  //     createPromise(countIteration, currentDelay);\n      \n  //     if (countIteration === +countIterationAll) {\n  //       clearInterval(id);\n  //     }\n      \n  //     countIteration += 1;\n      \n  //   }, intervalTime)\n\n  // },firstDelay)\n\n\nfunction createPromise(position, delay) {\n  const promise =  new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n    if (shouldResolve) {\n      resolve({position, delay})\n    } else {\n      reject({position, delay})\n    }\n  }).then((result) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch((error) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\n  return promise;  \n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","then","result","$parcel$interopDefault","Notify","success","catch","error","failure","formEl","document","querySelector","addEventListener","e","preventDefault","elements","step","amount","target","firstDelay","value","interval","countIterationAll","setTimeout","i","reset"],"version":3,"file":"03-promises.7e95bd23.js.map"}