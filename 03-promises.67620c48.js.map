{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,OAAQC,SAASC,cAAc,UAG5BF,OAAOG,iBAAiB,UAAU,SAAAC,GACrCA,EAAEC,iBACF,IAAsDC,EAARF,EAAEG,OAAxCC,SAAYC,EAAKH,EAALG,MAAOC,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAC3BC,EAAaH,EAAMI,MACnBC,EAAWJ,EAAKG,MAChBE,EAAoBJ,EAAOE,MAMjCG,YAAW,WAET,I,kBACEA,YAAW,YAgCjB,SAAuBC,EAAUR,GACd,IAAIS,SAAQ,SAACC,EAASC,GACfC,KAAKC,SAAW,GAGpCH,EAAQ,CAACF,WAAUR,UAEnBW,EAAO,CAACH,WAAUR,S,IAEnBc,MAAK,SAACC,GACPC,EAAA3B,GAAS4B,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAANnB,EAAM,M,IAEvEoB,OAAM,SAACC,GACNL,EAAA3B,GAAS4B,OAAOK,QAAQ,sBAAqCH,OAAfX,EAAS,QAAYW,OAANnB,EAAM,M,IA5C/DuB,CAAcC,EAAE,GAAIrB,EAAaqB,GAAKnB,E,GACrCA,EAAWmB,E,EAHPC,EAAI,EAAGA,GAAKnB,EAAmBmB,GAAK,EAACC,EAAAD,E,GAM7CtB,GAEHR,EAAEG,OAAO6B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('form')\n}\n\nrefs.formEl.addEventListener('submit', e => {\n  e.preventDefault();\n  const { elements: { delay, step, amount } } = e.target;\n  const firstDelay = delay.value;\n  const interval = step.value;\n  const countIterationAll = amount.value;\n  // let id;\n  // let countIteration = 0;\n  // let currentDelay = 0;\n  // let intervalTime;\n\n  setTimeout(() => {\n \n    for (let i = 0; i < +countIterationAll; i += 1) {\n      setTimeout(() => {\n        createPromise(i+1, +firstDelay + i * +interval);\n      }, interval * i)\n    }\n\n  }, firstDelay)\n  \n  e.target.reset();\n})\n\n\n  // setTimeout(() => {\n\n  //   id = setInterval(() => {\n  //      intervalTime = countIteration === 0 ? 0 : interval;\n  //      console.log(intervalTime);\n\n  //     // currentDelay = +firstDelay + countIteration * +interval;\n\n  //     createPromise(countIteration, currentDelay);\n      \n  //     if (countIteration === +countIterationAll) {\n  //       clearInterval(id);\n  //     }\n      \n  //     countIteration += 1;\n      \n  //   }, intervalTime)\n\n  // },firstDelay)\n\n\nfunction createPromise(position, delay) {\n  const promise =  new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n    if (shouldResolve) {\n      resolve({position, delay})\n    } else {\n      reject({position, delay})\n    }\n  }).then((result) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch((error) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\n  return promise;  \n}\n"],"names":["$iU1Pc","parcelRequire","formEl","document","querySelector","addEventListener","e","preventDefault","_elements","target","elements","delay","step","amount","firstDelay","value","interval","countIterationAll","setTimeout","position","Promise","resolve","reject","Math","random","then","result","$parcel$interopDefault","Notify","success","concat","catch","error","failure","$ce04d3a99e08e73b$var$createPromise","i","i1","_loop","reset"],"version":3,"file":"03-promises.67620c48.js.map"}